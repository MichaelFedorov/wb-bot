const { Telegraf, Scenes : { Stage, BaseScene }, Composer } = require('telegraf');
const axios = require('axios');

const { ordersUrl } = require('../../config');

const { mainKeyboard, settingsKeyboard } = require('../../util/keyboards');
const {
    confirmationInlineKeyboard,
} = require('./helpers');
const {  } = require('./actions');

const settings = new BaseScene('settings');

settings.enter(async (ctx) => {
    try {
        const uid = String(ctx.from.id);
        await ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∏–≤–∞—Ç—å?!', settingsKeyboard);
    }
    catch(e) {
        console.error(e);
    }
});
settings.hears('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', ctx => {
    ctx.session.replaceApi = false;
    ctx.scene.leave()
})
settings.hears('üîë –ó–∞–º–µ–Ω–∏—Ç—å API –ö–ª—é—á', async ctx => {
    ctx.session.replaceApi = true;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API –ö–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç WB', );
})

settings.on('text', async ctx => {
    // Checking if replaceAPi selected then validate the key
    if (ctx.session.replaceApi) {
        let isApiValid = false;
            const date = new Date().toISOString();
            const apiKey = ctx.message.text;
            
            await ctx.reply('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ ...');
            await axios.get(`${ordersUrl}${date}&take=1000&skip=0`, {
                headers: {
                    authorization: apiKey,
                } 
            })
            .then((response) => {
                isApiValid = true;
            })
            .catch((e) => {
                console.log(e)
                isApiValid = false;
            })

            if (isApiValid) {
                ctx.session.newApiKey = apiKey;
                ctx.session.replaceApi = false;
                await ctx.reply('–í–≤–µ–¥–Ω—ã–π –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω. –ó–∞–º–µ–Ω–∏—Ç—å?', confirmationInlineKeyboard);
            } else {
                await ctx.replyWithHTML(`‚ùóÔ∏è <b>–í–≤–µ–¥–µ–Ω—ã–π –≤–∞–º–∏ API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.</b>
    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.
    –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`);
            }
    }
})


settings.action('confirm', async ctx =>{
    await ctx.answerCbQuery();
    await ctx.deleteMessage();
    ctx.session.apiKey = ctx.session.newApiKey;
    ctx.session.replaceApi = false;
    ctx.session.newApiKey = '';
    // TODO restart notification with new key
    return await ctx.reply("–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
})

settings.action('cancel', async ctx =>{
    await ctx.answerCbQuery();
    await ctx.deleteMessage();
    ctx.session.replaceApi = false;
    ctx.session.newApiKey = '';
    return await ctx.reply("–ó–∞–º–µ–Ω–∞ –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–∞.");
})

settings.leave(async ctx => {
  await ctx.reply('–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', mainKeyboard);
});

//addKey.enter

module.exports = settings;