const axios = require('axios');
const { ordersUrl, stocksUrl, stickersPdfUrl } = require('../../config');

const getStocks = async (ctx) =>  {
    // TODO: check if stocks in session then not to call api
	await axios.get(`${stocksUrl}`, {
		headers: {
			authorization: ctx.session.user?.wbApiKey,
		}
	})
	.then((response) => {
    ctx.session.stocks = response?.data?.stocks;
	})
  .catch((e) => {
      console.log(e);
  })
}

const getTasks = async (ctx, status) => {
  const date = new Date();
  date.setDate(date.getDate() - 5);
  if(!ctx.session.stock) { 
    await getStocks(ctx);
  }

  await axios.get(`${ordersUrl}${date.toISOString()}&take=1000&skip=0`, {
    headers: {
      authorization: ctx.session.user?.wbApiKey
    }
  })
  .then((response) => {
    const tasks = response.data.orders.reverse();
    const tasksList = tasks.map(task => {
      return {
        ...task,
        ...ctx.session.stocks.find(item => item.barcode === task.barcode)
      }
    });
    if (status === 0 ) {
        ctx.session.newTasks = tasksList.filter(task => task.status === status);
    } else if (status === 1) {
        ctx.session.onAssemblyTasks = tasksList.filter(task => task.status === status);
    }
    else if (status === 2) {
        ctx.session.readyTasks = tasksList.filter(task => task.status === status);
    }
  })
  .catch((e) => {
      console.log(e);
      ctx.reply('‚ùóÔ∏è–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ä–∞–Ω–µ–µ –∫–ª—é—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞');
      ctx.session.tasks = [];
      ctx.session.newTasks = [];
      ctx.session.readyTasks = [];
      ctx.session.onAssemblyTasks = [];
      ctx.session.tasksForStickers = []
  })
};

const getTasksMsg = async (ctx) => {
  let msg = '';
  const tasks = ctx.session?.tasks?.slice(ctx.session?.firstTask, ctx.session?.lastTask);
  ctx.session.tasksForStickers = tasks;
  if (tasks?.length > 0) {
      tasks?.forEach((task, index) => {
          msg = `${msg}
--------------
üì¶ 0${ctx.session.firstTask + index + 1}  |  <b>${task.subject}</b>  |  ${task.article}  |  ${task.size?.split('/')[0]}  |  ${task.totalPrice/100} ‚ÇΩ  |  —à–∫ ${task.barcode}  |  —Å—Ç–∏–∫–µ—Ä ${task.sticker?.wbStickerId}
<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> ${task.stock} —à—Ç.
  `});

      msg +=
      `

–ü–æ–∫–∞–∑–∞–Ω–æ c <b>${ctx.session.firstTask + 1}</b> –ø–æ <b>${ctx.session.lastTask}</b> –∏–∑ <b>${ctx.session.tasks?.length}</b> –∑–∞–¥–∞–Ω–∏–π. `;
  } else {
      msg = '–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç –ø–æ–∫—É–ø–∞—Ç—å!'
  }
  return msg;
}

const getStickersPdf = async (ctx) =>  {
  const orderIds = ctx.session?.tasksForStickers.map(tasks => {
      return Number.parseInt(tasks.orderId)
  })
  await axios.post(`${stickersPdfUrl}`, { orderIds }, {
    headers: {
      authorization: ctx.session.user?.wbApiKey,
    }
  })
  .then((response) => {
    let buff = new Buffer.from(response?.data.data?.file, 'base64');
    ctx.telegram.sendDocument( ctx.chat.id, { 
      source: buff, 
      filename: `stickers_${ctx.session?.firstTask+1}-${ctx.session?.lastTask}.pdf`});
  })
  .catch((e) => {
    console.log(e);
  })
}

module.exports = {
    getTasks,
    getTasksMsg,
    getStickersPdf
}
